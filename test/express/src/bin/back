#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app_back');
const http = require('http');
const slogger = require('node-slogger');


/**
 * Get port from environment and store in Express.
 */
exports.start = function(callback) {
    var port = app.get('port');


    /**
     * Create HTTP server.
     */

    var server = http.createServer(app);

    /**
     * Listen on provided port, on all network interfaces.
     */

    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);

    /**
     * Event listener for HTTP server "error" event.
     */

    function onError(error) {
        if (error.syscall !== 'listen') {
            throw error;
        }

        var bind = typeof port === 'string'
            ? 'Pipe ' + port
            : 'Port ' + port;

        // handle specific listen errors with friendly messages
        switch (error.code) {
        case 'EACCES':
            slogger.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            slogger.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
        }
    }

    /**
     * Event listener for HTTP server "listening" event.
     */

    function onListening() {
        var addr = server.address();
        var bind = typeof addr === 'string'
            ? 'pipe ' + addr
            : 'port ' + addr.port;
        slogger.info('Back listening on ' + bind);
        callback();
    }
};



// process.on('uncaughtException', function(err) {

//     slogger.error('uncaughtException, restart current process',err);
    
//     if (process.env.DEBUG_LOCAL === 'true') {
//         slogger.info('kill current proccess:'+process.pid);
//         return process.exit();
//     }

// });
